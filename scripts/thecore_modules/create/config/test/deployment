#!/bin/bash -e

if ! [[ -d installers ]]
then
    echo -e "\e[31m\e[1mERROR! This Script is intended to be run from installer's parent directory."
    exit 1
fi

while read -p "Please provide the service name for where this will be installed, i.e. digitalocean: " SERVICE_NAME; do
    [[ $SERVICE_NAME ]] && [[ "${SERVICE_NAME}" =~ [a-z\.-_] ]] && break
done

while read -p "Please provide the customer name, i.e. alchemic: " CUSTOMER_NAME; do
    [[ $CUSTOMER_NAME ]] && [[ "${CUSTOMER_NAME}" =~ [a-z\.-_] ]] && break
done

echo "$SERVICE_NAME" > "/tmp/latest-service-name"
echo "$CUSTOMER_NAME" > "/tmp/latest-customer-name"

mkdir -p "installers/$SERVICE_NAME"

cd "installers/$SERVICE_NAME"

if [[ -f $CUSTOMER_NAME.env ]] || [[ -f "docker_host" ]]
then
    echo -e "\e[31m\e[1mERROR! config file $CUSTOMER_NAME.env or docker_host already exists, please remove it to create a new one. For security reasons I won't overwrite an already working config file.\e[0m"
else
    # Asking relevant information

    while read -p "Please provide an remote connection string for the deploy (i.e. ssh://root@66.21.34.152:22): " REMOTE_URL; do
        # '(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
        REGEX='ssh://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
        [[ $REMOTE_URL ]] && [[ "${REMOTE_URL}" =~ $REGEX ]] && break
    done
    echo "$REMOTE_URL" > "docker_host"

    # NAMING SECTION
    while read -p "Please provide a human readable Application Name, i.e. Thecore App: " APP_NAME; do
        [[ $APP_NAME ]] && break
    done
    while read -p "Please provide an identification string for the App. Only lowercase letters are allowed, i.e. thecore: " PROJECT_NAME; do
        [[ $PROJECT_NAME ]] && [[ "${PROJECT_NAME}" =~ [a-z] ]] && break
    done

    # DOMAIN SECTION
    while read -p "Please provide the domain for the App, i.e. thecore.com: " BASE_DOMAIN; do
        [[ $BASE_DOMAIN ]] && [[ "${BASE_DOMAIN}" =~ [a-z\.-_] ]] && break
    done
    while read -p "Please provide the subdomain for the Frontend, i.e. frontend: " FE_SUBDOMAIN; do
        [[ $FE_SUBDOMAIN ]] && [[ "${FE_SUBDOMAIN}" =~ [a-z\.-_] ]] && break
    done
    while read -p "Please provide the subdomain for the Backend, i.e. backend: " BE_SUBDOMAIN; do
        [[ $BE_SUBDOMAIN ]] && [[ "${BE_SUBDOMAIN}" =~ [a-z\.-_] ]] && break
    done
    while read -p "Please provide a valid email for admin user and Letsencrypt registration, i.e. admin@thecore.com: " ADMIN_EMAIL; do
        [[ $ADMIN_EMAIL ]] && [[ "${ADMIN_EMAIL}" =~ [a-z\.-_]@[a-z\.-_] ]] && break
    done

    # DOCKER SECTION
    while read -p "Please provide the Docker Network name this App will join, i.e. base_default: " NETWORK; do
        [[ $NETWORK ]] && break
    done

    # OTHER SERVICES SECTION
    while read -p "Please provide the Database Password of an accessible Postgresql instance: " DATABASE_PASSWORD; do
        [[ $DATABASE_PASSWORD ]] && break
    done
    while read -p "Please provide the Redis Password of an accessible REDIS instance: " REDIS_PASSWORD; do
        [[ $REDIS_PASSWORD ]] && break
    done

    # INTEGRATIONS SECTION
    while read -p "Can a user be allowed to login from different devices or is this a public event? [true,false]: " ALLOW_MULTISESSIONS; do
        [[ $ALLOW_MULTISESSIONS ]] && { [[ $ALLOW_MULTISESSIONS == "true" ]] || [[ $ALLOW_MULTISESSIONS == "false" ]] } && break
    done

    cat <<EOT > $CUSTOMER_NAME.env
# Common vars with base VARs (Better not to touch if already used)
DATABASE_PASSWORD=$DATABASE_PASSWORD
REDIS_PASSWORD=$REDIS_PASSWORD

# This App specific VARs (Don't touch absolutely)
SECRET_KEY_BASE=$(openssl rand -hex 64)
ADMIN_PASSWORD=$(openssl rand -hex 8)

# Derived vars (Maybe these can be touched)
APP_NAME=$APP_NAME
COMPOSE_PROJECT_NAME=$PROJECT_NAME
BASE_DOMAIN=$BASE_DOMAIN
FE_SUBDOMAIN=$FE_SUBDOMAIN
BE_SUBDOMAIN=$BE_SUBDOMAIN
LETSENCRYPT_EMAIL=$ADMIN_EMAIL
RAILS_ENV=production
RACK_ENV=production
RAILS_LOG_TO_STDOUT=true
LANG=en_US.UTF-8
RAILS_SERVE_STATIC_FILES=true
RAILS_RELATIVE_URL_ROOT=/
SMTP_DELIVERY_METHOD=smtp
SMTP_ADDRESS=$ADMIN_EMAIL
SMTP_USERNAME=$ADMIN_EMAIL
SMTP_PASSWORD=changeme

# Less frequently changed VARS
BACKEND_DOMAIN=${BE_SUBDOMAIN}.${BASE_DOMAIN}
BACKEND_URL=https://${BE_SUBDOMAIN}.${BASE_DOMAIN}
FRONTEND_DOMAIN=${FE_SUBDOMAIN}.${BASE_DOMAIN}
FRONTEND_URL=https://${FE_SUBDOMAIN}.${BASE_DOMAIN}
REDIS_URL=redis://:${REDIS_PASSWORD}@redis

NETWORK=$NETWORK

ALLOW_MULTISESSIONS=true
EOT
    cd ..
    docker-compose --env-file "$SERVICE_NAME/$CUSTOMER_NAME.env" config
    echo -e "\e[32m\e[1mCongratulations! Config file succesfully generated. Please run bin/up.sh on the production server to install this new application.\e[0m"
    echo "Please check the config file dump above to see if it's all right for the installation."
fi
