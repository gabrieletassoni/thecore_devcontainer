#!/bin/bash

# Be sure all the files are owned by working user
sudo chown -R vscode:vscode * .*

if [[ $1 == "--help" ]]
then
echo -e "\e[1mTo create a Thecore APP:\e[0m\n  1) please run \e[31m$0\e[0m\n  2) please answer to the questions posed by the wizard.\n"
exit 0
fi

# Trap failures to get also the line number of the failure
set -eE -o functrace
failure() {
  local lineno=$1
  local msg=$2
  echo "Failed at $lineno: $msg"
}
trap 'failure ${LINENO} "$BASH_COMMAND"' ERR

# Functions
tc() { set "${*,,}" ; echo "${*^}" ; }
choose () {
    echo -e "\e[33mPlease type the number of the choice.\e[0m"
    select CHOICE in "${OPTIONS[@]}"; do
        # $opt being empty signals invalid input.
        [[ -n $CHOICE ]] || { echo "Invalid option, please try again typing the number of the choice." >&2; continue; }
        break # a valid choice was made, exit the prompt.
    done
}

yesno () {
    echo "$1"
    OPTIONS=("yes" "no")
    choose
}

FULLNAME="$(basename "$(pwd)")"
yesno "The WebApp will be called $FULLNAME, is this ok?"
[[ $CHOICE == "no" ]] && read -p "Please provide an alternative name: " -r FULLNAME
pattern='^[a-z0-9_-]+$'
if [[ "$FULLNAME" =~ $pattern ]]
then
    # Actually run the selected Thecore application type
    rails new . --database=postgresql --asset-pipeline=sprockets --skip-git

    cp /etc/thecore/.gitignore .gitignore

    git init -b main
    git add . -A
    git commit -a -m "Initial Git"

    yesno "Would you like to add a remote git repository?"
    if [[ $CHOICE == "yes" ]]
    then
        STOPLOOP="false"
        while [[ "$STOPLOOP" == "false" ]]
        do
            read -r -p "Please provide a git repository URL: " GITREPOURL
            yesno "Is the connection string $GITREPOURL correct?"
            if [[ $CHOICE == "yes" ]]
            then
                git remote add origin "${GITREPOURL}"
                git push --set-upstream origin master
                git push --tags
                STOPLOOP=true
            fi
        done
    fi
    # Add thecore as submodules
    # TODO: Remove the branch when 3.0 will be a thing
    git submodule add -b "feature/road-to-3.0.0" https://github.com/gabrieletassoni/model_driven_api.git vendor/submodules/model_driven_api
    git submodule add -b "feature/road-to-3.0.0" https://github.com/gabrieletassoni/thecore_ui_rails_admin.git vendor/submodules/thecore_ui_rails_admin

    # Add to the Gemfile all the needed gems
    echo "gem 'rails-erd', group: :development" >> Gemfile
    echo "gem 'rails_admin'" >> Gemfile
    echo "gem 'sassc-rails'" >> Gemfile
    echo "gem 'model_driven_api', '~> 3.0', require: 'model_driven_api', path: 'vendor/submodules/model_driven_api'" >> Gemfile
    echo "gem 'thecore_ui_rails_admin', '~> 3.0', require: 'thecore_ui_rails_admin', path: 'vendor/submodules/thecore_ui_rails_admin'" >> Gemfile

    bundle update

    # Install the gems
    rails g rails_admin:install --asset=sprockets
    rails active_storage:install
    rails action_text:install
    rails action_mailbox:install
    rails g erd:install

    mv Gemfile Gemfile.base
    echo "eval File.read('Gemfile.base')" > Gemfile

    cp /etc/thecore/.gitlab-ci.yml .gitlab-ci.yml

    # Remove auto generated git, I will create a git init in the proper way below
    rails db:create
    rails db:migrate
    rails thecore:db:seed
    
    echo "0.0.1" > version

    git add . -A
    git commit -a -m "Thecorization completed"
else
    echo -e "\e[31m\e[1mERROR"'!'"\e[0m The name can only contain lowercase letters, numbers, - and _: \e[31m\e[1mplease rename\e[0m\e[31m this project's folder to match the given constraint\e[0m." 
    exit 1
fi

mkdir -p vendor/custombuilds
mkdir -p vendor/deploytargets

touch vendor/deploytargets/.keep vendor/custombuilds/.keep

echo "New Thecore App: ${FULLNAME} created."

exit 0