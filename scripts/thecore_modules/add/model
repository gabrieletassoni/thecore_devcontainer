#!/bin/bash

if [[ $1 == "--help" ]]
then
  echo -e "\e[1mTo generate Models for your Engine:\e[0m\n  1) please cd into engine directory\n  2) please run \e[31m$0\e[0m\n  3) please follow the wizard adding all the needed models and fields.\n"
  exit 0
fi

# Trap failures to get also the line number of the failure
set -eE -o functrace
failure() {
  local lineno=$1
  local msg=$2
  echo "Failed at $lineno: $msg"
}
trap 'failure ${LINENO} "$BASH_COMMAND"' ERR

# add_has_many $1 $2 $3 [ $4 ]
# $4 is present only if it's an has many through
# i.e.
# add_has_many $GEMNAME $MODEL_UNDERSCORE_PLURAL $LEFT
# add_has_many $GEMNAME $MODEL_UNDERSCORE_PLURAL $LEFT $RIGHT
add_has_many () {
  CLASSIFY="$(ruby -e "require 'active_support/inflector'; puts '$3'.classify")"
  PLURAL="$(ruby -e "require 'active_support/inflector'; puts '$3'.pluralize")"
  [ "$4" ] && OTHERPLURAL="$(ruby -e "require 'active_support/inflector'; puts '$4'.pluralize")"
  if [ -f "app/models/$3.rb" ] 
  then 
    # add has many and has many through declarations
    if [ "$4" ]
    then
      grep "has_many :$PLURAL, through: :$2, inverse_of: $OTHERPLURAL" "app/models/$3.rb" || sed -i "/^  # Associations$/a\  has_many :$PLURAL, through: :$2, inverse_of: :$OTHERPLURAL" "app/models/$3.rb"
    fi
    grep "has_many :$2, dependent: :destroy, inverse_of: $3" "app/models/$3.rb" || sed -i "/^  # Associations$/a\  has_many :$2, dependent: :destroy, inverse_of: :$3" "app/models/$3.rb"
  else
    # otherwise (the file does not exist) check if the initializer for concerns exists,
    # For each model in this gem
    initializer_name="associations_for_${3}_concern.rb"
    initializer_name_full_path=config/initializers/${initializer_name}
    [ -f "$initializer_name_full_path" ] || cp '/etc/thecore/templates/association_concern.tt' "$initializer_name_full_path"
    grep '<%= @model_name %>' "$initializer_name_full_path" && sed -i "s/<%= @model_name %>/$CLASSIFY/g" "$initializer_name_full_path"

    # Add the Include
    echo 'Adding after_initialize file'
    after_initialize_file_name="after_initialize_for_${1}.rb"
    after_initialize_file_fullpath=config/initializers/$after_initialize_file_name
    [ -f "$after_initialize_file_fullpath" ] || echo -e "Rails.application.configure do\n  config.after_initialize do\n  end\nend" > "$after_initialize_file_fullpath"
    
    sed -i "/config.after_initialize do$/a\  $CLASSIFY.send(:include, ${4}AssociationsConcern)" "$after_initialize_file_fullpath"

    # then add to it the has_many declaration
    if [ "$4" ]
    then
      grep "has_many :$PLURAL, through: :$2, inverse_of: :$OTHERPLURAL" "$initializer_name_full_path" || sed -i "/included do$/a\  has_many :$PLURAL, through: :$2, inverse_of: :$OTHERPLURAL" "$initializer_name_full_path"
    fi
    grep "has_many :$2, dependent: :destroy, inverse_of: :$3" "$initializer_name_full_path" || sed -i "/included do$/a\  has_many :$2, dependent: :destroy, inverse_of: :$3" "$initializer_name_full_path"
  fi
}

# add_poly_has_many "$GEMNAME" $MAIN_MODEL_PLURAL "$M" "$POL"
add_poly_has_many () {
  CLASSIFY="$(ruby -e "require 'active_support/inflector'; puts '$3'.classify")"
  if [ -f "app/models/$3.rb" ] 
  then
    grep "has_many :$2, as: :$4, dependent: :destroy, inverse_of: :$3" "app/models/$3.rb" || sed -i "/^  # Associations$/a\  has_many :$2, as: :$4, dependent: :destroy, inverse_of: $3" "app/models/$3.rb"
  else
    # otherwise (the file does not exist) check if the initializer for concerns exists,
    # For each model in this gem
    initializer_name="associations_for_${3}_concern.rb"
    initializer_name_full_path=config/initializers/${initializer_name}
    [ -f "$initializer_name_full_path" ] || cp '/etc/thecore/templates/association_concern.tt' "$initializer_name_full_path"
    grep '<%= @model_name %>' "$initializer_name_full_path" && sed -i "s/<%= @model_name %>/$CLASSIFY/g" "$initializer_name_full_path"

    # ADD the include
    echo 'Adding after_initialize file'
    after_initialize_file_name="after_initialize_for_${1}.rb"
    after_initialize_file_fullpath=config/initializers/$after_initialize_file_name
    [ -f "$after_initialize_file_fullpath" ] || echo -e "Rails.application.configure do\n  config.after_initialize do\n  end\nend" > "$after_initialize_file_fullpath"
    
    sed -i "/config.after_initialize do$/a\  $CLASSIFY.send(:include, ${4}AssociationsConcern)" "$after_initialize_file_fullpath"

    # then add to it the has_many declaration
    grep "has_many :$2, as: :$4, dependent: :destroy, inverse_of: :$3" "$initializer_name_full_path" || sed -i "/included do$/a\  has_many :$2, as: :$4, dependent: :destroy, inverse_of: $3" "$initializer_name_full_path"
  fi
}

# thor thecore_generate:models
# Installing dependencies
# gem install activesupport
bundle install

GEMSPEC_FILE="$(find . -name "*.gemspec"|tail -n1)"
GEMNAME=$(basename -- "$GEMSPEC_FILE")
# extension="${GEMNAME##*.}"
GEMNAME="${GEMNAME%.*}"
if [[ -e bin/rails ]]
then
  read -rp "Please enter a model declaration (i.e. ModelName title:string:index active:boolean due_at:datetime):" MODEL_DECLARATION
  MODEL_ARRAY=($MODEL_DECLARATION) # ex. ModelName title:string:index active:boolean due_at:datetime reviewable:references{polymorphic} user:references
  MODEL_CAMEL_CASE=${MODEL_ARRAY[0]} # 
  MODEL_UNDERSCORE_CASE=$(sed 's/^[[:upper:]]/\L&/;s/[[:upper:]]/\L_&/g' <<< "$MODEL_CAMEL_CASE")
  MODEL_UNDERSCORE_PLURAL=$(ruby -e "require 'active_support/inflector'; puts '$MODEL_UNDERSCORE_CASE'.pluralize")
  MODEL_FILE_NAME="$MODEL_UNDERSCORE_CASE.rb"
  MODEL_FILE_PATH="app/models/$MODEL_FILE_NAME"
  # Associations Info got from the Model definition
  BELONGS=$(ruby -e "'$MODEL_DECLARATION'.split.map do |m| m.scan(/^(.+).references$/).flatten if m.include? 'references' end.flatten.compact.join(' ')")
  POLYMORPHICS=$(ruby -e "'$MODEL_DECLARATION'.split.map do |m| m.match(/^(.+).references.polymorphic.$/)[1] if m.include? 'polymorphic' end.compact.join(' ')")
  echo "Generating the model: rails way"
  bin/rails g model ${MODEL_ARRAY[@]} -s
  echo 'Replace ActiveRecord::Base with ApplicationRecord'
  echo "Add rails_admin declaration only in files which are ActiveRecords and don't already have that declaration"
  echo 'Thecorizing the Model and completing Belongs To Associations'
  # Download this entry's template for api and railsadmin
  mkdir -p "app/models/concerns/api/" "app/models/concerns/rails_admin/"
  # API + Rails Admin Concerns
  [[ -e "app/models/concerns/api/$MODEL_FILE_NAME" ]] || cp '/etc/thecore/templates/model_api_concern.tt' "app/models/concerns/api/$MODEL_FILE_NAME"
  [[ -e "app/models/concerns/rails_admin/$MODEL_FILE_NAME" ]] || cp '/etc/thecore/templates/model_rails_admin_concern.tt' "app/models/concerns/rails_admin/$MODEL_FILE_NAME"
  # Replace in the generated file the templates
  sed -i "s/<%= @model_name %>/$MODEL_CAMEL_CASE/g" "app/models/concerns/api/$MODEL_FILE_NAME"
  sed -i "s/<%= @model_name %>/$MODEL_CAMEL_CASE/g" "app/models/concerns/rails_admin/$MODEL_FILE_NAME"

  # It must be a class and don't have rails_admin declaration
  sed -i 's/ActiveRecord::Base/ApplicationRecord/' "$MODEL_FILE_PATH"
  # Associations
  sed -i '/ApplicationRecord$/a\  # Associations' "$MODEL_FILE_PATH"
  # Validations
  sed -i '/ApplicationRecord$/a\  # Validations' "$MODEL_FILE_PATH"
  # Concerns
  sed -i '/ApplicationRecord$/a\  # Concerns' "$MODEL_FILE_PATH"
  # If it's UI type only
  if grep thecore_ui_rails_admin "$GEMSPEC_FILE"
  then
    grep "include RailsAdmin::$MODEL_CAMEL_CASE" "$MODEL_FILE_PATH" || sed -i "/ApplicationRecord$/a\  include RailsAdmin::$MODEL_CAMEL_CASE" "$MODEL_FILE_PATH"
  fi
  # If it's API type only
  if grep model_driven_api "$GEMSPEC_FILE"
  then
    grep "include Api::$MODEL_CAMEL_CASE" "$MODEL_FILE_PATH" || sed -i "/ApplicationRecord$/a\  include Api::$MODEL_CAMEL_CASE" "$MODEL_FILE_PATH"
  fi

  # TODO: go on with translating line 50 in thecore_generate.thor to bash
  echo 'Completing Belongs To Associations:'
  sed -i "/^(?!.*inverse_of.*)^ *belongs_to.*$/s/$/, inverse_of: :$MODEL_UNDERSCORE_PLURAL/g" "$MODEL_FILE_PATH"

  echo 'Add Has Many Through Associations:'
  # Check if the model described in "$MODEL_FILE_PATH" has 2 or more belongs_to
  # If it has them, I ask if it's the association model for an Has Many Through
  # and give the choice by listing all the belongs_to (user must choose two, 
  # maybe I can show all the possible couples if more than two belongs_to are found?)
  # BELONGS=$(grep -Po 'belongs_to :\K(.+), .+' "$MODEL_FILE_PATH" |cut -d , -f1)
  BELONGSARRAY=($BELONGS)
  BELONGSNUMBER=${#BELONGSARRAY[@]}
  if [ "$BELONGSNUMBER" -gt 1 ]
  then
    echo "$MODEL_FILE_PATH has more than one belongs_to, so it could be an association table for one or more has_many :through associations."
    ASSOCIATIONS=$(ruby -e "pivot='$BELONGS'.split;pivot2=pivot.clone; pivot.each {|elem| pivot2.each{|c| puts elem+'<->'+c if elem != c}; pivot2.shift}")
    for ASSOC in $ASSOCIATIONS
    do
      TABLES=$(ruby -e "'$ASSOC'.split('<->').each { |a| puts a }")
      TABLESARY=($TABLES)
      echo "$MODEL_UNDERSCORE_CASE is the association table between ${TABLESARY[0]} and ${TABLESARY[1]}"
      LEFT=${TABLESARY[0]}
      RIGHT=${TABLESARY[1]}
      add_has_many "$GEMNAME" "$MODEL_UNDERSCORE_PLURAL" "$LEFT" "$RIGHT"
      add_has_many "$GEMNAME" "$MODEL_UNDERSCORE_PLURAL" "$RIGHT" "$LEFT"
    done
  fi

  echo 'Add Has Many Associations'
  [ "$BELONGSNUMBER" -eq 1 ] && add_has_many "$GEMNAME" "$MODEL_UNDERSCORE_PLURAL" "${BELONGSARRAY[0]}"

  # TODO: Go on with conversion of file thecore_generate.thor from line 91
  echo 'Add Polymorphic Has Manies'
  for POL in $POLYMORPHICS
  do
    echo "$POL is a polymorphic association, to which models do I have to add the corresponding has_many?"
    read -rp "  Please provide a space separated list of models (i.e. item user location, please type NONE to skip this action):" MODELSLIST
    if [ "$MODELSLIST" != "NONE" ]
    then
      for M in $MODELSLIST
      do
        add_poly_has_many "$GEMNAME" "$MODEL_UNDERSCORE_PLURAL" "$M" "$POL" 
      done
    fi
  done
fi

exit 0