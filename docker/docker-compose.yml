version: "3.9"

# These come from exported environment variables
# probably set in the shell script which handles 
# the up of the application.
x-vars: &vars
  # Hardcoded
  RACK_ENV: production
  RAILS_ENV: production
  RAILS_LOG_TO_STDOUT: "true"
  RAILS_RELATIVE_URL_ROOT: /
  RAILS_SERVE_STATIC_FILES: "true"
  REDIS_URL: redis://cache
  DATABASE_URL: postgres://postgres:postgres@db/postgres?pool=${DATABASE_POOL:-30}
  ALLOW_MULTISESSIONS: "true"
  # Derived
  SECRET_KEY_BASE: ${SECRET_KEY_BASE}
  ADMIN_PASSWORD: ${ADMIN_PASSWORD}
  APP_NAME: ${APP_NAME}
  COMPOSE_PROJECT_NAME: ${COMPOSE_PROJECT_NAME}
  LANG: ${LANG}
  BACKEND_DOMAIN: ${BE_SUBDOMAIN}.${BASE_DOMAIN}
  BACKEND_URL: https://${BE_SUBDOMAIN}.${BASE_DOMAIN}
  FRONTEND_DOMAIN: ${FE_SUBDOMAIN}.${BASE_DOMAIN}
  FRONTEND_URL: https://${FE_SUBDOMAIN}.${BASE_DOMAIN}

services: 
  db:
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - /root/persistence/${COMPOSE_PROJECT_NAME}/db:/var/lib/postgresql/data
    healthcheck: 
      interval: 1s
      retries: 30
      test: "pg_isready -U postgres"
      timeout: 3s

  cache:
    image: redis:latest
    entrypoint: "redis-server"
    restart: unless-stopped
    healthcheck: 
      interval: 1s
      retries: 30
      test: "redis-cli ping"
      timeout: 3s

  backend:
    image: ${IMAGE_TAG_BACKEND}
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    entrypoint: /bin/thecore/entrypoint.sh
    environment:
      <<: *vars
    volumes:
      - /root/persistence/${COMPOSE_PROJECT_NAME}/storage:/app/storage
      - /root/persistence/${COMPOSE_PROJECT_NAME}/imports:/app/tmp/imports
    healthcheck:
      test: "${DOCKER_HEALTHCHECK_TEST:-curl --fail http://localhost:3000/}"
      interval: "60s"
      timeout: "3s"
      retries: 3

  worker:
    image: ${IMAGE_TAG_BACKEND}
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
      backend:
        condition: service_healthy
    entrypoint: /bin/thecore/entrypoint-sidekiq.sh
    environment:
      <<: *vars
    volumes:
      - /root/persistence/${COMPOSE_PROJECT_NAME}/storage:/app/storage
      - /root/persistence/${COMPOSE_PROJECT_NAME}/imports:/app/tmp/imports
    healthcheck:
      test: "${DOCKER_HEALTHCHECK_TEST:-bundle exec sidekiqmon|grep $(hostname)}"
      interval: "60s"
      timeout: "3s"
      retries: 3
